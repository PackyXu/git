创建/修改 版本库：

1 cd ~
2 cd ~/Documents    进入git上级所在目录
3 cd git            进入git所在目录
4 git config --global username "onTheRoad"    设置管理员名字
5 git config --global useremail “youngxury@gmail.com”  设置管理员邮箱
6 git config user.name   查看管理员名字
7 git config user.email  查看管理员邮箱
8 git init     初始化
9 ls -a        插卡看当前库git下的所有文件
10 open git   打开git
11 touch test.txt   创建文件
12 git status       查看状态
13 git add test.txt 添加文件
14 git status       查看状态
15 git log   查看log日志
16 git add test.txt    添加文件
17 git commit -m “change 1”   添加状态标识
18 git status -s  查看状态
19 git diff   文件比对
20 git add .  所有文件
21 git status -s   查看修改的文件（绿色）
22 git diff —-cached  文件比对状态
23 git diff HEAD     查看已经修改的状态staged

撤销回到从前：

1 git log --oneline    查看git库 中所有文件的log日志（状态）
2 
3 git rest test.txt    回到前一个状态
4 git reset --hard HEAD 回到上一个

5 git reset --hard HEAD^   回到上一个状态
  git reset --hard HEAD^^  回到上两个状态
  git reset --hard HEAD^^^ 回到上三个状态
  git reset --hard HEAD~100 回到前一百个状态 数字可以自定
  git reset --hard 71dsdss  也可以指定状态码
  git reflow  查看所有状态码   回到指定的状态
6 checkout：

  git checkout 123ddss —- text2.txt  指定ID回到原来的状态

branch 分支：

1 git log --oneline --graph   查看所有分支

2 git branch dev  创建分支dev 表示develop 开发：
 
  git branch     查看所有分支状态
  git checkout dev 切换到分支
  git commit -am "change 3 in dev"  
  git checkout master 切换到主分支
  git merge  --no-ff -m "keep merge info" dev  将分支文件合并到主分支
  git log --oneline --graph    查看主分支状态

3  第二种创建分支 并且直接切换到分支上：

   git checkout -b dev
   git branch   查看分支状态 现在已经在分支上了

4 

5删除分支需要先切换到主分支：
  1 git checkout master  切换到主分支
  2 git branch -d dev    删除分支
  git branch -D dev      强行删除分支
  3 git commit -am "change 3 in dev"  给分支添加备注，前提这个文件是已经git add过的
  4 git checkout master 切换到主分支

6 merge conflict  冲突：

  git merge dev 
  git commit -am “solve conflict”  重新添加
  git log —online  —graph  查看
 

7 rebase 分支冲突 （比较危险）： 

  git rebase dev
  git branch
  git add test.txt
  git rebase —-continue (运行) 
  也可以选择跳过或终止：[git rebase —-skip 跳过,git rebase —abort 终止]

  git log —online  —graph  查看

 
  


8 stash 临时修改：
 
  git checkout dev
  git status -s
  git stash     暂放在一边
  git stash pop  返回暂存的文件

9 giuhub 将本地git项目推到GitHub
  
  cd ~/Documents/git/

  git remote add origin https://github.com/YoungMRX/git.git
  git push -u origin master

  注意：如果在推送过程中报错：
	fatal: remote origin already exists.
	或者：
        To https://github.com/YoungMRX/demo.git
 	! [rejected]        master -> master (fetch first)
	error: failed to push some refs to 'https://github.com/YoungMRX/demo.git'
	hint: Updates were rejected because the remote contains work that you do
	hint: not have locally. This is usually caused by another repository pushing
	hint: to the same ref. You may want to first integrate the remote changes
	hint: (e.g., 'git pull ...') before pushing again.
	hint: See the 'Note about fast-forwards' in 'git push --help' for details.

	
	输入:git remote rm origin  删除
       
	重新输入:
	git remote add origin https://github.com/YoungMRX/git.git
	
	git push -u origin master


  本地文件修改后 再推到GitHub:

   git commit -am “change 5”
	
   git push -u origin master

  


11


